---
blueprint:
  name: AWTRIX Temperature
  description: >
    This is a blueprint to display the temperature using the default Meteorologisk institutt (Met.no) weather integration. It may work with other weather integrations.

    This blueprint will publish to one topic for the temperature app.  It is called `awtrix_temperature` by default.

    _This blueprint may be updated with new features_

  domain: automation
  input:
    awtrix_app:
      name: Awtrix App Name
      description: >
        The app name that will be used on the Awtrix device
      selector:
        text:
      default: "jeef_weather"

    message_duration_forecast:
      name: Display Duration
      description: >-
        The number of seconds the `AWTRIX Temperature` app should be displayed.  *If you select `0` it will use the Global App Time*
      selector:
        number:
          min: 0
          max: 300
          unit_of_measurement: "sec"
      default: 0

    trigger_frequency:
      name: Trigger Frequency
      description: >
        The frequency (in minutes) that automation will use to trigger the refresh of information displayed on the Awrix device.
        This uses the [time pattern trigger](https://www.home-assistant.io/docs/automation/trigger/#time-pattern-trigger) format used by Home Assistant triggers.
      default: "/10"
      selector:
        text:

    awtrix:
      name: AWTRIX Device
      description: Select the Awtrix device
      selector:
        device:
          integration: mqtt
          manufacturer: Blueforcer
          model: AWTRIX 3
          multiple: true

    forecast_var:
      name: Hourly Forecast Provider
      description: >
        Select a weather entity that provides an hourly forecast

        This has been tested with the following weather service providers:

          - HA [Meteorologisk institutt (Met.no)](https://www.home-assistant.io/integrations/met) integration 
          
      selector:
        entity:
          filter:
            domain:
              - weather
          multiple: false

    current_temp_var:
      name: Outdoor Temperature Sensor (Optional)
      description: >
        If desired, select an optional sensor to provide the current outdoor temperature you wish to display.  This can be a "Feels Like" value or a personal outdoor thermometer.
          -  `None` will use the default temperature provided by the weather service provider selected above.
      selector:
        entity:
          domain:
            - sensor
          multiple: false
      default: None

    hours_to_show:
      name: Hours Displayed
      description: >
        The number of hours of temperature forecast displayed along the bottom of the screen
      selector:
        number:
          max: 24
          min: 0
          unit_of_measurement: "hours"
          mode: box
      default: 12

    temp_digits:
      name: Temp Digits
      description: >
        By default the temp is rounded to the nearest whole-number. Change this to 1 or 2 in order to see more decimal places.
      selector:
        number:
          min: 0
          max: 2
          step: 1
          mode: box
          unit_of_measurement: "Decimal places"
      default: 0

    temp_suffix:
      name: Temperature suffix
      description: >-
        The suffix to be displayed after the temperature
      selector:
        select:
          options:
            - label: None
              value: ""
            - label: "°"
              value: "°"
            - label: °F
              value: "°F"
            - label: °C
              value: "°C"
            - label: F
              value: "F"
            - label: C
              value: "C"
      default: "°F"

    color_matrix_json:
      name: Color Matrix
      description: >
        The `Color Matrix` will control color maps to temperature ranges on the display. The format of this map is **JSON** 

        Some possible mappings are:

        #### USA: Farenheit 0-100


            {"0": "#FEC4FF","10": "#D977DF","20": "#9545BC","30": "#4B379C","40": "#31B8DB","50": "#31DB8B","60": "#6ED228","70": "#FFFF28","80": "#F87E27","90": "#CF3927","100": "#A12527"}


        #### EURO: -12°c to  -38°c

            {"-12": "#D977DF","-6": "#9545BC","-1": "#4B379C","0": "#FEC4FF","4": "#31B8DB","10": "#31DB8B","15": "#6ED228","21": "#FFFF28","27": "#F87E27","32": "#CF3927","38": "#A12527"}

      selector:
        text:
          multiline: true
      default: >
        {
          "0": "#4B0082",
          "10": "#0000FF",
          "20": "#1E90FF",
          "30": "#87CEEB",
          "40": "#40E0D0",
          "50": "#32CD32",
          "60": "#FFFF00",
          "70": "#DAA520",
          "80": "#FFA500",
          "90": "#FF4500",
          "100": "#FF0000"
        }

    icon_clear_night:
      name: Icon for clear-night
      description: >

        The default clear_night icon is: 

          ![](https://developer.lametric.com/content/apps/icon_thumbs/53383_icon_thumb.gif?v=2) - `53383`

      selector:
        text:
      default: "w-clear-night"

    icon_cloudy:
      name: Icon for cloudy
      description: >
        This is the icon ID which maps to the weather state: `cloudy`

        ![](https://developer.lametric.com/content/apps/icon_thumbs/53384_icon_thumb.gif?v=1)
      selector:
        text:
      default: "w-cloudy"
    icon_exceptional:
      name: Icon for exceptional
      description: >
        This is the icon ID which maps to the weather state: `exceptional`


        ![](https://developer.lametric.com/content/apps/icon_thumbs/36637_icon_thumb.gif?v=1)
      selector:
        text:
      default: "w-exceptional"
    icon_fog:
      name: Icon for fog
      description: >
        This is the icon ID which maps to the weather state: `fog`

        ![](https://developer.lametric.com/content/apps/icon_thumbs/17055_icon_thumb.gif?v=1)
      selector:
        text:
      default: "w-fog"
    icon_hail:
      name: Icon for hail
      description: >
        This is the icon ID which maps to the weather state: `hail` (IF YOU HAVE A BETTER ONE PLEASE LET ME KNOW)

        ![](https://developer.lametric.com/content/apps/icon_thumbs/53385_icon_thumb.gif?v=1)

      selector:
        text:
      default: "w-hail"
    icon_lightning:
      name: Icon for lightning
      description: >
        This is the icon ID which maps to the weather state: `lightning`

        ![](https://developer.lametric.com/content/apps/icon_thumbs/29839_icon_thumb.gif?v=1)

      selector:
        text:
      default: "w-lightning"
    icon_lightning_rainy:
      name: Icon for lightning-rainy
      description: >
        This is the icon ID which maps to the weather state: `lightning-rainy`

        ![](https://developer.lametric.com/content/apps/icon_thumbs/49299_icon_thumb.gif?v=4)
      selector:
        text:
      default: "w-lightning-rainy"
    icon_partlycloudy:
      name: Icon for partlycloudy
      description: >
        This is the icon ID which maps to the weather state: `partlycloudy`

        ![](https://developer.lametric.com/content/apps/icon_thumbs/2286_icon_thumb.gif?v=1)

      selector:
        text:
      default: "w-partlycloudy"
    icon_pouring:
      name: Icon for pouring
      description: >
        This is the default icon which maps to the weather state: `pouring`

        ![](https://developer.lametric.com/content/apps/icon_thumbs/49300_icon_thumb.gif?v=1)

      selector:
        text:
      default: "w-pouring"
    icon_rainy:
      name: Icon for rainy
      description: >
        This is the default icon which maps to the weather state: `rainy`

        ![](https://developer.lametric.com/content/apps/icon_thumbs/2720_icon_thumb.gif?v=1)

      selector:
        text:
      default: "w-rainy"
    icon_snowy:
      name: Icon for snowy
      description: >
        This is the icon ID which maps to the weather state: `snowy`

        ![](https://developer.lametric.com/content/apps/icon_thumbs/2289_icon_thumb.gif?v=1)
      selector:
        text:
      default: "w-snowy"
    icon_snowy_rainy:
      name: Icon for snowy-rainy
      description: >
        This is the icon ID which maps to the weather state: `snowy-rainy`

        ![](https://developer.lametric.com/content/apps/icon_thumbs/49301_icon_thumb.gif?v=2)
      selector:
        text:
      default: "w-snowy-rainy"
    icon_sunny:
      name: Icon for sunny
      description: >
        This is the icon ID which maps to the weather state: `sunny`

        ![](https://developer.lametric.com/content/apps/icon_thumbs/53386_icon_thumb.gif?v=1)
      selector:
        text:
      default: "w-sunny"
    icon_windy:
      name: Icon for windy
      description: >
        This is the icon ID which maps to the weather state: `windy`

        ![](https://developer.lametric.com/content/apps/icon_thumbs/3363_icon_thumb.gif?v=1)
      selector:
        text:
      default: "w-windy"
    icon_windy_variant:
      name: Icon for windy-variant
      description: >
        This is the icon ID which maps to the weather state: `windy-variant`

        ![](https://developer.lametric.com/content/apps/icon_thumbs/3363_icon_thumb.gif?v=1)
      selector:
        text:
      default: "w-windy-variant"

mode: restart
variables:
  device_ids: !input awtrix
  app_topic: !input awtrix_app
  topics: >-
    {%- macro get_device_topic(device_id) %}
    {{ states((device_entities(device_id) | select('search','device_topic') | list)[0]) }}
    {%- endmacro %}

    {%- set ns = namespace(devices=[]) %}
    {%- for device_id in device_ids %}
      {%- set device=get_device_topic(device_id)|replace(' ','') %}
      {% set ns.devices = ns.devices + [ device ~ '/custom/' ~ app_topic] %}
    {%- endfor %}
    {{ ns.devices | reject('match','unavailable') | list}}

  #---------------------------------
  # Weather Variables
  #---------------------------------
  forecast_var: !input forecast_var
  current_condition: "{{states(forecast_var)}}"
  current_temp: "{{state_attr(forecast_var,'temperature')}}"

  # Forecast hours to show
  hours_to_show: !input hours_to_show

  #----------------
  # Temp & Text
  # --------------
  message_duration: !input message_duration_forecast
  current_temp_var: !input current_temp_var
  temp_digits: !input temp_digits
  temp_suffix: !input temp_suffix

  temp_text: >-
    {%- macro round_and_set_temp(temp_var, temp_suffix, digits=0) -%}
    {%- if has_value(temp_var) -%}
      {{ states(temp_var) | round(digits) ~ temp_suffix}} 
    {%- else -%}
    {{current_temp ~ temp_suffix}}
    {%- endif -%}
    {%- endmacro -%}
    {{ round_and_set_temp(current_temp_var, temp_suffix, temp_digits)}}

  text_available_width: 24

  text_len: >-
    {%- macro get_text_len(string) %}
    {%- set length = namespace(value=0) %}
    {%- for char in string %}
      {%- if char.isdigit() %}
        {%- set length.value = length.value + 3 %}
      {%- elif char == '°' %}
        {%- set length.value = length.value + 2 %}
      {%- elif char == '.' %}
        {%- set length.value = length.value + 1 %}
      {%- elif char in ['-','C','F'] %}
        {%- set length.value = length.value + 3 %}
      {%- else %}
        {%- set length.value = length.value + 1 %}
      {%- endif %}
      {%- if not loop.last %}
        {%- set length.value = length.value + 1 %}{%- endif -%}
    {%- endfor -%}
    {{ length.value }}
    {%- endmacro %}

    {{get_text_len(temp_text)}}
  text_x: >-
    {{8 + ((text_available_width - text_len)/2)}}

  # ------------------------------
  # Icons&Stuff
  # ------------------------------

  icon_clear_night: !input icon_clear_night
  icon_cloudy: !input icon_cloudy
  icon_exceptional: !input icon_exceptional
  icon_fog: !input icon_fog
  icon_hail: !input icon_hail
  icon_lightning: !input icon_lightning
  icon_lightning_rainy: !input icon_lightning_rainy
  icon_partlycloudy: !input icon_partlycloudy
  icon_pouring: !input icon_pouring
  icon_rainy: !input icon_rainy
  icon_snowy: !input icon_snowy
  icon_snowy_rainy: !input icon_snowy_rainy
  icon_sunny: !input icon_sunny
  icon_windy: !input icon_windy
  icon_windy_variant: !input icon_windy_variant
  color_matrix_json: !input color_matrix_json
  color_dict: >-
    {% set b = color_matrix_json | from_json %}    
    {%- set ns = namespace(tuples=[]) %}
    {%- for k,v in b | items -%}
      {%- set key = k|float -%}
      {%- set ns.tuples = ns.tuples + [(key,v)] %}      
    {% endfor %}
    {{ dict.from_keys(ns.tuples) }}

  icon_dict: >-
    {{ dict({'clear-night': icon_clear_night,
    'cloudy': icon_cloudy,
    'exceptional': icon_exceptional,
    'fog': icon_fog,
    'hail': icon_hail,
    'lightning': icon_lightning,
    'lightning-rainy': icon_lightning_rainy,
    'partlycloudy': icon_partlycloudy,
    'pouring': icon_pouring,
    'rainy': icon_rainy,
    'snowy': icon_snowy,
    'snowy-rainy': icon_snowy_rainy,
    'sunny': icon_sunny,
    'windy': icon_windy, 
    'windy-variant': icon_windy_variant})}}

  #--------------
  # Weather Icon
  #--------------
  icon: >
    {{ icon_dict[current_condition] }}

trigger:
  - platform: time_pattern
    minutes: !input trigger_frequency
  - platform: state
    entity_id: !input forecast_var
    id: Changes
    enabled: true
condition: []
action:
  - service: weather.get_forecasts
    target:
      entity_id: "{{forecast_var}}"
    data:
      type: hourly
    response_variable: forecast_response
  - service: weather.get_forecasts
    target:
      entity_id: "{{forecast_var}}"
    data:
      type: daily
    response_variable: daily_forecast_response
  - repeat:
      for_each: "{{ topics }}"
      sequence:
        - service: mqtt.publish
          data:
            topic: "{{repeat.item}}"
            payload: >-
              {%- set forecast = forecast_response[forecast_var]['forecast'] -%}
              {%- set daily_forecast = daily_forecast_response[forecast_var]['forecast'] -%}
              {%- macro interpolate(dictionary, x) -%}
              {%- set sorted_keys = dictionary|dictsort -%}
              {%- set above = sorted_keys|selectattr('0', 'gt', x)|map(attribute='0')|list|first -%}
              {%- set below = sorted_keys|selectattr('0', 'lt', x)|map(attribute='0')|list|last -%}

              {#- Key matches x exactly -#}
              {%- if above is defined and dictionary[above] == x -%}
                {%- set value = dictionary[above] -%}
                {{ value }}
              {%- elif below is defined and dictionary[below] == x -%}
                {%- set value = dictionary[below] -%}
                {{ value }}
              {#- Interpolation between two values -#}
              {%- elif below is defined and above is defined -%}
                {%- set lower_value = dictionary[below] -%}
                {%- set upper_value = dictionary[above] -%}
                {%- set lower_rgb = lower_value[1:] -%}
                {%- set upper_rgb = upper_value[1:] -%}

                {%- set lower_r = lower_rgb[0:2]|int(base=16) -%}
                {%- set lower_g = lower_rgb[2:4]|int(base=16) -%}
                {%- set lower_b = lower_rgb[4:6]|int(base=16) -%}

                {%- set upper_r = upper_rgb[0:2]|int(base=16) -%}
                {%- set upper_g = upper_rgb[2:4]|int(base=16) -%}
                {%- set upper_b = upper_rgb[4:6]|int(base=16) -%}

                {%- set interpolation_factor = (x - below) / (above - below) -%}
                {%- set interpolated_r = ((1 - interpolation_factor) * lower_r + interpolation_factor * upper_r)|int -%}
                {%- set interpolated_g = ((1 - interpolation_factor) * lower_g + interpolation_factor * upper_g)|int -%}
                {%- set interpolated_b = ((1 - interpolation_factor) * lower_b + interpolation_factor * upper_b)|int -%}

                {%- set interpolated_hex = '#' ~ '%02X' % interpolated_r ~ '%02X' % interpolated_g ~ '%02X' % interpolated_b -%}
                {{ interpolated_hex }}
              {#- Only below key available -#}
              {%- elif below is defined -%}
                {%- set value = dictionary[below] -%}
                {{ value }}
              {#- Only above key available -#}
              {%- elif above is defined -%}
                {%- set value = dictionary[above] -%}
                {{ value }}
              {#- No matching keys available -#}
              {%- else -%}
                No matching key found.
              {%- endif -%}
              {%- endmacro -%}

              {#- Define macro to get length of the forecast -#}
              {%- macro str_len(stringo) %}
              {%- if '.' in stringo %}
              {%- set char_count = (stringo | length) -1 %}{{char_count * 3 + 1 + char_count}}
              {%- else %}
              {%- set char_count = (stringo | length) %}{{char_count * 3 + (char_count - 1)}}
              {%- endif %}
              {%- endmacro %}

              {#- Define a macro to draw out the forecast lines#}
                {%- macro draw_forecast_lines(x,hours,height) %}
                  {%- for hour in range(hours) %}
                    {%- if height == 0 %}
                      {"dp": [{{x+hour}},7,"{{interpolate(color_dict, forecast[hour]['temperature']) }}"]}
                    {%- else %}
                      {"dl": [{{x+hour}},7,{{x+hour}},{{7 - height}},"{{interpolate(color_dict, forecast[hour]['temperature']) }}"]}
                    {%- endif %}
                    {%- if hour+1 != hours %},{%endif%}
                  {%- endfor %}
                {%- endmacro %}

                {#- Define a macro to draw out the temperature range#}
                {%- macro draw_temperature_range(actual_temp, low_temp, high_temp) %}
                  {"debug": [{{actual_temp}}, {{low_temp}}, {{high_temp}}]}
                  {%- set proportion = (actual_temp - low_temp) / (high_temp - low_temp) %}
                  {%- set target = [(proportion * 8) | round(0, 'floor'), 0] | max %}
                  {%- for x in range(0, 8) %}
                    {"debug2": [{{target}}, {{x}}]}
                    {%- if x == target %}
                      ,{"dp": [31, {{ x }}, "{{interpolate(color_dict, current_temp | float)}}"]}
                    {%- else %}
                      ,{"dp": [31, {{ x }}, "#D3D3D3"]}
                    {%- endif %}
                  {%- endfor %}
                {%- endmacro %}

                {#- Define a macro get temperature#}
                {%- macro get_temp(temp_var) -%}
                  {%- if has_value(temp_var) -%}
                    {{ states(temp_var) | round(0) }} 
                  {%- else -%}
                    {{current_temp}}
                  {%- endif -%}
                {%- endmacro -%}

                {
                  "draw": [
                    {%- if hours_to_show > 0 %}
                    {{draw_forecast_lines((20 - (hours_to_show / 2)) | round(0),hours_to_show,0)}}
                  {%- endif %}
                    {{draw_temperature_range(get_temp(current_temp_var) | int, daily_forecast[0]['templow'] | int, daily_forecast[0]['temperature'] | int)}}
                  {%- if current_temp != 'unavailable' -%}
                  ,{"dt":[{{text_x}},1,"{{temp_text}}","{{interpolate(color_dict, current_temp | float)}}"]}
                  {%- else -%}
                  {"dt":"err"}
                  {%- endif -%}
                  ],
                  "icon": "{{icon}}",
                  "duration": {{message_duration}},
                  "pushIcon": 2,
                  "lifetime": 120,
                  "lifetimeMode":1,
                  "weather": "{{current_condition}}"
                  }

        - service: mqtt.publish
          data:
            qos: 0
            retain: false
            topic: "{{ repeat.item ~ '_sun'}} "
            payload: >
              {{sun_payload}}